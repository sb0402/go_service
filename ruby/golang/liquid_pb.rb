# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: liquid.proto
# bundle exec grpc_tools_ruby_protoc -I. --ruby_out=. --grpc_out=. liquid.proto
require 'google/protobuf'


descriptor_data = "\n\x0cliquid.proto\x12\x06liquid\"p\n\x08Template\x12\x32\n\tvariables\x18\x01 \x03(\x0b\x32\x1f.liquid.Template.VariablesEntry\x1a\x30\n\x0eVariablesEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"\x1e\n\x0cParsedResult\x12\x0e\n\x06result\x18\x01 \x01(\t2Q\n\rLiquidParsing\x12@\n\x14ParseAndRenderString\x12\x10.liquid.Template\x1a\x14.liquid.ParsedResult\"\x00\x42\x1fZ\x1dliquidparsing/liquidparsingpbb\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Liquid
  Template = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("liquid.Template").msgclass
  ParsedResult = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("liquid.ParsedResult").msgclass
end
